using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using WindowsInput;
using Microsoft.Win32;
using PastePro.Properties;

namespace PastePro
{
    public partial class PastePro : Form
    {
        /// <summary>
        ///     Helper list to contain current hotkey id's
        /// </summary>
        private readonly List<int> _hotkeyIds = new List<int>();

        /// <summary>
        ///     Keyboard input simulator
        /// </summary>
        private readonly InputSimulator _inputSimulator = new InputSimulator();

        /// <summary>
        ///     Helper to see if a hotkey is set properly
        /// </summary>
        private bool _keyIsSet;

        public PastePro()
        {
            //Load form
            InitializeComponent();

            //Add listener to windows clipboard
            var registerClipboard = AddClipboardFormatListener(Handle);

            Debug.WriteLine($"Added hook to clipboard with success? {registerClipboard}");

            //Register hot keys
            RegisterHotkeys();

            //Check windows startup setting
            CheckWindowsStartUp();

            //Refresh the UI
            RefreshUi();
        }

        /// <summary>
        ///     Import function to Register a global hotkey
        /// </summary>
        /// <param name="hwnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key</param>
        /// <param name="id">The identifier of the hot key</param>
        /// <param name="modifiers">
        ///     The keys that must be pressed in combination with the key specified by the key parameter in
        ///     order to generate the WM_HOTKEY message
        /// </param>
        /// <param name="key">The virtual-key code of the hot key</param>
        /// <returns>Boolean of registration success</returns>
        [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
        private static extern bool RegisterHotKey(IntPtr hwnd, int id, int modifiers, int key);

        /// <summary>
        ///     Imported function to Unregister a global hotkey
        /// </summary>
        /// <param name="hwnd">The handle of where the hotkey was registered</param>
        /// <param name="id">The id of the hotkey</param>
        /// <returns>Boolean of sucessfull unregistration</returns>
        [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
        private static extern bool UnregisterHotKey(IntPtr hwnd, int id);

        /// <summary>
        ///     Imported function to add a listener to windows clipboard events
        /// </summary>
        /// <param name="hwnd">The handle of the window</param>
        /// <returns>Bool of sucessfull listener adding</returns>
        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool AddClipboardFormatListener(IntPtr hwnd);

        /// <summary>
        ///     Register hotkeys on form load
        /// </summary>
        private void RegisterHotkeys()
        {
            //If first mod is not 0...
            if (Settings.Default.FirstMod != 0)
            {
                //Register hotkey, 0X4000 stands for Norepeat fsmodifier 
                var register = RegisterHotKey(Handle, 0, Settings.Default.FirstMod | 0x4000, Settings.Default.FirstKey);

                //Add registered hotkey to our helper list
                _hotkeyIds.Add(0);

                Debug.WriteLine($"Registered First? {register}");
            }

            //if second mod is not 0...
            if (Settings.Default.SecondMod != 0)
            {
                //Register hotkey, 0x4000 stands for Norepeat fsmodifier
                var register = RegisterHotKey(Handle, 1, Settings.Default.SecondMod | 0x4000,
                    Settings.Default.SecondKey);

                //Add registered hotkey to our helper list
                _hotkeyIds.Add(1);

                Debug.WriteLine($"Registered Second? {register}");
            }

            //if third mod is not 0...
            if (Settings.Default.ThirdMod != 0)
            {
                //Register hotkey, 0x4000 stands for Norepeat fsmodifier
                var register = RegisterHotKey(Handle, 2, Settings.Default.ThirdMod | 0x4000, Settings.Default.ThirdKey);

                //Add registered hotkey to our helper list
                _hotkeyIds.Add(2);

                Debug.WriteLine($"Registered Third? {register}");
            }

            //if fourth mod is not 0...
            if (Settings.Default.FourthMod != 0)
            {
                //Register hotkey, 0x4000 stands for Norepeat fsmodifier
                var register = RegisterHotKey(Handle, 3, Settings.Default.FourthMod | 0x4000,
                    Settings.Default.FourthKey);

                //Add registered hotkey to our helper list
                _hotkeyIds.Add(3);

                Debug.WriteLine($"Registered Fourth? {register}");
            }
        }

        /// <summary>
        ///     Add or remove program from windows startup depending on the setting
        /// </summary>
        private static void CheckWindowsStartUp()
        {
            //If settings say that the application needs to start with windows...
            if (Settings.Default.WindowsStartup)
            {
                //Register application to start with windows
                StartApplicationWithWindows();
                //Return
                return;
            }
            //Else remove application from windows startup registry
            DisableApplicationWithWindows();
        }

        /// <summary>
        ///     Refresh the UI to match current settings
        /// </summary>
        private void RefreshUi()
        {
            FirstShortcut.Enabled = FirstEnabled.Checked;
            FirstString.Enabled = FirstEnabled.Checked;

            SecondShortcut.Enabled = SecondEnabled.Checked;
            SecondString.Enabled = SecondEnabled.Checked;

            ThirdShortcut.Enabled = ThirdEnabled.Checked;
            ThirdString.Enabled = ThirdEnabled.Checked;

            FourthShortcut.Enabled = FourthEnabled.Checked;
            FourthString.Enabled = FourthEnabled.Checked;
        }

        /// <summary>
        ///     WindowProc callback function
        /// </summary>
        /// <param name="m"> The current windows message</param>
        protected override void WndProc(ref Message m)
        {
            //Capture message
            base.WndProc(ref m);

            //Switch on message.msg
            switch (m.Msg)
            {
                //If message was a copy event and the Paste String to First is checked...
                case 0x031D when PasteStringToFirst.Checked:
                {
                    //If trim is checked, trim text else get clipboard as is
                    var copiedText = TrimCopiedText.Checked ? Clipboard.GetText().Trim() : Clipboard.GetText();

                    //If the copied text is not empty
                    if (copiedText != string.Empty)
                    {
                        //Set first string text to copied text
                        FirstString.Text = copiedText;
                    }

                    //break
                    break;
                }
                //If message was one of our global hotkeys
                case 0x0312:
                {
                    //Get ID of the hotkey that was pressed
                    var id = m.WParam.ToInt32();

                    //Declare the string to be pasted
                    var stringToPaste = string.Empty;

                    //Switch on the hotkey id, take corresponding value from text box if it is enabled in the UI
                    switch (id)
                    {
                        case 0:
                            if (FirstEnabled.Checked)
                            {
                                stringToPaste = FirstString.Text;
                            }

                            break;
                        case 1:
                            if (SecondEnabled.Checked)
                            {
                                stringToPaste = SecondString.Text;
                            }

                            break;
                        case 2:
                            if (ThirdEnabled.Checked)
                            {
                                stringToPaste = ThirdString.Text;
                            }

                            break;
                        case 3:
                            if (FourthEnabled.Checked)
                            {
                                stringToPaste = FourthString.Text;
                            }

                            break;
                    }

                    //If we got a string...
                    if (stringToPaste != string.Empty)
                    {
                        //Send it as keystrokes
                        _inputSimulator.Keyboard.TextEntry(stringToPaste);
                    }

                    //break
                    break;
                }
            }
        }

        /// <summary>
        ///     Form resize event
        /// </summary>
        private void Form1_Resize(object sender, EventArgs e)
        {
            //If window state is not minimized, return
            if (WindowState != FormWindowState.Minimized) return;
            //Hide
            Hide();
            //Show notify icon
            notifyIcon.Visible = true;
        }

        /// <summary>
        ///     Notify icon gets double clicked
        /// </summary>
        private void notifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            //Show form
            Show();

            //Set window state to normal
            WindowState = FormWindowState.Normal;

            //Hide the icon
            notifyIcon.Visible = false;
        }

        /// <summary>
        ///     If any enabled checkbox is changed
        /// </summary>
        private void EnabledCheckedChange(object sender, EventArgs e)
        {
            //Refresh the ui
            RefreshUi();
        }

        /// <summary>
        ///     When a text box containing string to be pasted gets clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="m"></param>
        private void StringBox_MouseClick(object sender, MouseEventArgs e)
        {
            //Try to...
            try
            {
                //Get the box that was clicked
                var clickedBox = (TextBox) sender;

                //Get text from clipboard
                var data = Clipboard.GetText();

                //If trim copied text was set
                if (TrimCopiedText.Checked)
                {
                    //Trim text
                    data = data.Trim();
                }

                //Set to text box
                clickedBox.Text = data;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
            }
        }

        /// <summary>
        ///     When the short cut box gets a keydown event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ShortCutBoxKeyDown(object sender, KeyEventArgs e)
        {
            //Get the short cut box
            var shortCutBox = (TextBox) sender;

            //Suppress keys press
            e.SuppressKeyPress = true;

            //Clear text
            shortCutBox.Text = string.Empty;

            //Set helper variable to false
            _keyIsSet = false;

            //If no modifier key was given...
            if (e.Modifiers == Keys.None)
            {
                //Show a message box to user
                MessageBox.Show("You have to give a modifier, like 'Control', 'Shift' or 'Alt'");
                //Clear text from text box
                shortCutBox.Text = string.Empty;

                //Unregister hotkey, make sure that settings are correct
                FixHotkeys(shortCutBox.Name);

                //Return
                return;
            }

            //Get modifiers
            var modifiers = e.Modifiers.ToString().Split(',');

            //If multiple modifiers...
            if (modifiers.Length > 1)
            {
                //Show message box to user
                MessageBox.Show("Only a single modifier allowed...");

                //Clear text box
                shortCutBox.Text = string.Empty;

                //Unregister hotkey, make sure that settings are correct
                FixHotkeys(shortCutBox.Name);

                //Return
                return;
            }

            //If one modifier is found
            if (modifiers[0] != Keys.None.ToString())
            {
                //Start writing to text box
                shortCutBox.Text += modifiers[0] + " + ";
            }

            //If pressed key is a modifier key...
            if ((e.KeyCode == Keys.ShiftKey) | (e.KeyCode == Keys.ControlKey) | (e.KeyCode == Keys.Menu))
            {
                //The key is not set yet
                _keyIsSet = false;
            }
            //Else
            else
            {
                //Update text box
                shortCutBox.Text += e.KeyCode.ToString();
                //Key is set 
                _keyIsSet = true;
            }
        }

        /// <summary>
        ///     When the short cut box gets a keyup event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ShortCutBoxKeyUp(object sender, KeyEventArgs e)
        {
            //Get current box
            var currentBox = (TextBox) sender;

            //Get current modifer
            var modifier = KeyHelper.ModKeys.ContainsKey(e.Modifiers) ? KeyHelper.ModKeys[e.Modifiers] : 0;

            //Get current key
            var key = e.KeyValue;

            //If there is no modifier then return
            if (modifier == 0) return;

            //On KeyUp if KeyisSet is False then clear the text box.
            if (_keyIsSet == false)
            {
                currentBox.Text = Keys.None.ToString();
            }

            //Declare hotkey id helper
            var hotkeyId = -1;

            //Get correct id
            switch (currentBox.Name)
            {
                case "FirstShortcut":
                    hotkeyId = 0;
                    break;
                case "SecondShortcut":
                    hotkeyId = 1;
                    break;
                case "ThirdShortcut":
                    hotkeyId = 2;
                    break;
                case "FourthShortcut":
                    hotkeyId = 3;
                    break;
            }

            //If we already got a hotkey registered with that id
            if (_hotkeyIds.Contains(hotkeyId))
            {
                //Unregister the old hotkey
                var unregistered = UnregisterHotKey(Handle, hotkeyId);

                Debug.WriteLine($"Unregistered hotkey {hotkeyId} with success? {unregistered}");

                //Remove the id from our helper
                _hotkeyIds.Remove(hotkeyId);

                if (!unregistered)
                {
                    MessageBox.Show(
                        "Unregistering off old hotkey failed, can't register new hotkey! Restart the program and try again.");
                    return;
                }
            }

            Debug.WriteLine($"Try register hotkey {Handle} {hotkeyId} {modifier} {key}");

            //Register new hot key
            var register = RegisterHotKey(Handle, hotkeyId, modifier | 0x4000, key);

            Debug.WriteLine($"Success? {register}");

            //If a successful register
            if (register)
            {
                //add id to helper
                _hotkeyIds.Add(hotkeyId);

                //Update settings
                switch (hotkeyId)
                {
                    case 0:
                        Settings.Default.FirstMod = modifier;
                        Settings.Default.FirstKey = key;
                        break;
                    case 1:
                        Settings.Default.SecondMod = modifier;
                        Settings.Default.SecondKey = key;
                        break;
                    case 2:
                        Settings.Default.ThirdMod = modifier;
                        Settings.Default.ThirdKey = key;
                        break;
                    case 3:
                        Settings.Default.FourthMod = modifier;
                        Settings.Default.FourthKey = key;
                        break;
                }
            }
            //else
            else
            {
                MessageBox.Show(
                    "Something went wrong with registering hotkey. Are you trying to set same hotkey in two different places?");
            }
        }

        private void FixHotkeys(string textBoxName)
        {
            //Switch on checkbox name
            switch (textBoxName)
            {
                case "FirstShortcut":
                    //Clear settings of corresponding text box
                    Settings.Default.FirstMod = 0;
                    Settings.Default.FirstKey = 0;

                    //If our hotkey id helper contains corresponding id...
                    if (_hotkeyIds.Contains(0))
                    {
                        //Unregister the hot key
                        var unregistered = UnregisterHotKey(Handle, 0);
                        Debug.WriteLine(unregistered);

                        //Remove id from helper
                        _hotkeyIds.Remove(0);
                    }

                    break;

                case "SecondShortcut":
                    //Clear settings of corresponding text box
                    Settings.Default.SecondMod = 0;
                    Settings.Default.SecondKey = 0;

                    //If our hotkey id helper contains corresponding id...
                    if (_hotkeyIds.Contains(1))
                    {
                        //Unregister the hot key
                        var unregistered = UnregisterHotKey(Handle, 1);
                        Debug.WriteLine(unregistered);

                        //Remove id from helper
                        _hotkeyIds.Remove(1);
                    }

                    break;

                case "ThirdShortcut":
                    //Clear settings of corresponding text box
                    Settings.Default.ThirdMod = 0;
                    Settings.Default.ThirdKey = 0;

                    //If our hotkey id helper contains corresponding id...
                    if (_hotkeyIds.Contains(2))
                    {
                        //Unregister the hot key
                        var unregistered = UnregisterHotKey(Handle, 2);
                        Debug.WriteLine(unregistered);

                        //Remove id from helper
                        _hotkeyIds.Remove(2);
                    }

                    break;

                case "FourthShortcut":
                    //Clear settings of corresponding text box
                    Settings.Default.FourthMod = 0;
                    Settings.Default.FourthKey = 0;

                    //If our hotkey id helper contains corresponding id...
                    if (_hotkeyIds.Contains(3))
                    {
                        //Unregister the hot key
                        var unregistered = UnregisterHotKey(Handle, 3);
                        Debug.WriteLine(unregistered);

                        //Remove id from helper
                        _hotkeyIds.Remove(3);
                    }

                    break;
            }
        }

        /// <summary>
        ///     Helper function to see if application already is a startup item in windows registry
        /// </summary>
        /// <returns></returns>
        private static bool IsStartupItem()
        {
            // The path to the key where Windows looks for startup applications
            var startAppWithWindowsKey =
                Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);

            //Return our application registeration status
            return startAppWithWindowsKey?.GetValue("PastePro") != null;
        }

        /// <summary>
        ///     Generate key to windows registry to run application on windows startup
        /// </summary>
        private static void StartApplicationWithWindows()
        {
            // The path to the key where Windows looks for startup applications
            var startAppWithWindowsKey =
                Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);

            //If the app is already a startup item then return
            if (IsStartupItem()) return;

            //Else register app to run on windows start
            startAppWithWindowsKey?.SetValue("PastePro", Application.ExecutablePath);
        }

        /// <summary>
        ///     Remove register key that runs application in windows start
        /// </summary>
        private static void DisableApplicationWithWindows()
        {
            // The path to the key where Windows looks for startup applications
            var startWithWindowsKey =
                Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);

            //If the app is a startup item...
            if (IsStartupItem())
            {
                //Remove key from registry
                startWithWindowsKey?.DeleteValue("PastePro", false);
            }
        }

        private void Save_Click(object sender, EventArgs e)
        {
            Settings.Default.FirstEnabled = FirstEnabled.Checked;
            Settings.Default.SecondEnabled = SecondEnabled.Checked;
            Settings.Default.ThirdEnabled = ThirdEnabled.Checked;
            Settings.Default.FourthEnabled = FourthEnabled.Checked;

            Settings.Default.FirstShortcut = FirstShortcut.Text;
            Settings.Default.SecondShortcut = SecondShortcut.Text;
            Settings.Default.ThirdShortcut = ThirdShortcut.Text;
            Settings.Default.FourthShortcut = FourthShortcut.Text;

            Settings.Default.TrimCopiedText = TrimCopiedText.Checked;
            Settings.Default.PasteToFirst = PasteStringToFirst.Checked;
            Settings.Default.WindowsStartup = RunOnWindowsStart.Checked;

            Settings.Default.Save();
            MessageBox.Show("Saved!");
        }
    }
}